2024/11/21 18:08:57 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce GTX 1650
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64
    GCC: n/a
    PyTorch: 2.4.1+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2024.2.1-Product Build 20240722 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 90.1
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=9.1.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.1+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    diff_rank_seed: False
    deterministic: True
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/11/21 18:10:18 - mmengine - INFO - Config:
ann_file = '../datasets/80-20-split/80_20.pkl'
custom_layout = dict(
    center=0,
    inward=[
        (
            1,
            0,
        ),
        (
            2,
            1,
        ),
        (
            3,
            2,
        ),
        (
            4,
            3,
        ),
        (
            5,
            4,
        ),
        (
            6,
            3,
        ),
        (
            7,
            6,
        ),
        (
            8,
            7,
        ),
        (
            9,
            8,
        ),
        (
            10,
            3,
        ),
        (
            11,
            10,
        ),
        (
            12,
            11,
        ),
        (
            13,
            12,
        ),
        (
            14,
            0,
        ),
        (
            15,
            14,
        ),
        (
            16,
            15,
        ),
        (
            17,
            16,
        ),
        (
            18,
            0,
        ),
        (
            19,
            18,
        ),
        (
            20,
            19,
        ),
        (
            21,
            20,
        ),
    ],
    num_node=22)
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, save_best='auto', type='CheckpointHook'),
    early_stop=dict(
        monitor='acc/top1',
        patience=5,
        rule='greater',
        type='EarlyStoppingHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'modified_checkpoint.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
loso_dir = '../loso'
model = dict(
    backbone=dict(
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(
            layout=dict(
                center=0,
                inward=[
                    (
                        1,
                        0,
                    ),
                    (
                        2,
                        1,
                    ),
                    (
                        3,
                        2,
                    ),
                    (
                        4,
                        3,
                    ),
                    (
                        5,
                        4,
                    ),
                    (
                        6,
                        3,
                    ),
                    (
                        7,
                        6,
                    ),
                    (
                        8,
                        7,
                    ),
                    (
                        9,
                        8,
                    ),
                    (
                        10,
                        3,
                    ),
                    (
                        11,
                        10,
                    ),
                    (
                        12,
                        11,
                    ),
                    (
                        13,
                        12,
                    ),
                    (
                        14,
                        0,
                    ),
                    (
                        15,
                        14,
                    ),
                    (
                        16,
                        15,
                    ),
                    (
                        17,
                        16,
                    ),
                    (
                        18,
                        0,
                    ),
                    (
                        19,
                        18,
                    ),
                    (
                        20,
                        19,
                    ),
                    (
                        21,
                        20,
                    ),
                ],
                num_node=22),
            mode='stgcn_spatial'),
        in_channels=3,
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(in_channels=256, num_classes=2, type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.001, momentum=0.9, nesterov=True, type='SGD',
        weight_decay=0.0005))
param_scheduler = [
    dict(
        T_max=16,
        by_epoch=True,
        convert_to_iter_based=True,
        eta_min=0,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=True, diff_rank_seed=False, seed=0)
resume = False
train_cfg = dict(
    max_epochs=16, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        dataset=dict(
            ann_file='..\\datasets\\2class-all\\loso_split_s08.pkl',
            pipeline=[
                dict(dataset='coco', feats=[
                    'jm',
                ], type='GenSkeFeat'),
                dict(type='PoseDecode'),
                dict(num_person=1, type='FormatGCNInput'),
                dict(type='PackActionInputs'),
            ],
            split='xsub_train',
            type='PoseDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='..\\datasets\\2class-all\\loso_split_s08.pkl',
        pipeline=[
            dict(dataset='coco', feats=[
                'jm',
            ], type='GenSkeFeat'),
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(type='AccMetric'),
    dict(num_classes=2, type='ConfusionMatrix'),
]
val_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './loso_2class_all/loso_split_s08.pkl_lr_0.001_bs_16_repeat_3'

2024/11/21 18:10:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/11/21 18:10:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/11/21 18:10:20 - mmengine - INFO - 1800 videos remain after valid thresholding
2024/11/21 18:10:21 - mmengine - INFO - 200 videos remain after valid thresholding
Name of parameter - Initialization information

backbone.data_bn.weight - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.data_bn.bias - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.weight - torch.Size([192, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.weight - torch.Size([64, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.weight - torch.Size([384, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.weight - torch.Size([768, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.conv.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

cls_head.fc.weight - torch.Size([2, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

cls_head.fc.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 
2024/11/21 18:10:23 - mmengine - INFO - Load checkpoint from modified_checkpoint.pth
2024/11/21 18:10:23 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/11/21 18:10:23 - mmengine - INFO - Checkpoints will be saved to C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\loso_2class_all\loso_split_s08.pkl_lr_0.001_bs_16_repeat_3.
2024/11/21 18:11:25 - mmengine - INFO - Epoch(train)  [1][ 20/338]  lr: 9.9997e-04  eta: 4:37:40  time: 3.0922  data_time: 2.5488  memory: 1978  loss: 0.7561  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.7561
2024/11/21 18:11:36 - mmengine - INFO - Epoch(train)  [1][ 40/338]  lr: 9.9987e-04  eta: 2:44:44  time: 0.5905  data_time: 0.0037  memory: 1932  loss: 0.4967  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.4967
2024/11/21 18:11:49 - mmengine - INFO - Epoch(train)  [1][ 60/338]  lr: 9.9971e-04  eta: 2:08:03  time: 0.6275  data_time: 0.0043  memory: 1788  loss: 0.3494  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.3494
2024/11/21 18:12:02 - mmengine - INFO - Epoch(train)  [1][ 80/338]  lr: 9.9947e-04  eta: 1:49:40  time: 0.6298  data_time: 0.0051  memory: 1978  loss: 0.3815  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.3815
2024/11/21 18:12:14 - mmengine - INFO - Epoch(train)  [1][100/338]  lr: 9.9917e-04  eta: 1:38:03  time: 0.6018  data_time: 0.0045  memory: 1643  loss: 0.3593  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3593
2024/11/21 18:12:26 - mmengine - INFO - Epoch(train)  [1][120/338]  lr: 9.9881e-04  eta: 1:30:42  time: 0.6329  data_time: 0.0048  memory: 1639  loss: 0.2639  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.2639
2024/11/21 18:12:39 - mmengine - INFO - Epoch(train)  [1][140/338]  lr: 9.9837e-04  eta: 1:25:15  time: 0.6220  data_time: 0.0043  memory: 1850  loss: 0.2794  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2794
2024/11/21 18:12:51 - mmengine - INFO - Epoch(train)  [1][160/338]  lr: 9.9787e-04  eta: 1:21:08  time: 0.6245  data_time: 0.0047  memory: 1792  loss: 0.2636  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2636
2024/11/21 18:13:04 - mmengine - INFO - Epoch(train)  [1][180/338]  lr: 9.9730e-04  eta: 1:17:51  time: 0.6203  data_time: 0.0044  memory: 2136  loss: 0.3139  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.3139
2024/11/21 18:13:16 - mmengine - INFO - Epoch(train)  [1][200/338]  lr: 9.9666e-04  eta: 1:15:00  time: 0.5998  data_time: 0.0046  memory: 1978  loss: 0.2841  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.2841
2024/11/21 18:13:29 - mmengine - INFO - Epoch(train)  [1][220/338]  lr: 9.9596e-04  eta: 1:13:02  time: 0.6498  data_time: 0.0046  memory: 1978  loss: 0.2322  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2322
2024/11/21 18:13:44 - mmengine - INFO - Epoch(train)  [1][240/338]  lr: 9.9519e-04  eta: 1:12:10  time: 0.7640  data_time: 0.0090  memory: 2136  loss: 0.2103  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.2103
2024/11/21 18:13:58 - mmengine - INFO - Epoch(train)  [1][260/338]  lr: 9.9435e-04  eta: 1:10:55  time: 0.6904  data_time: 0.0094  memory: 1978  loss: 0.2167  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.2167
2024/11/21 18:14:11 - mmengine - INFO - Epoch(train)  [1][280/338]  lr: 9.9345e-04  eta: 1:09:32  time: 0.6463  data_time: 0.0071  memory: 1752  loss: 0.1876  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1876
2024/11/21 18:14:24 - mmengine - INFO - Epoch(train)  [1][300/338]  lr: 9.9248e-04  eta: 1:08:23  time: 0.6588  data_time: 0.0064  memory: 2136  loss: 0.2247  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2247
2024/11/21 18:14:37 - mmengine - INFO - Epoch(train)  [1][320/338]  lr: 9.9144e-04  eta: 1:07:22  time: 0.6602  data_time: 0.0058  memory: 1904  loss: 0.0959  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0959
2024/11/21 18:14:48 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:14:48 - mmengine - INFO - Epoch(train)  [1][338/338]  lr: 9.9045e-04  eta: 1:06:21  time: 0.6467  data_time: 0.0064  memory: 1752  loss: 0.2287  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.2287
2024/11/21 18:14:48 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/11/21 18:15:59 - mmengine - INFO - Epoch(val) [1][13/13]    acc/top1: 0.8700  acc/top5: 1.0000  acc/mean1: 0.8700  confusion_matrix/result: 
tensor([[88, 12],
        [14, 86]])
  data_time: 4.9205  time: 5.1341
2024/11/21 18:16:00 - mmengine - INFO - The best checkpoint with 0.8700 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
2024/11/21 18:16:11 - mmengine - INFO - Epoch(train)  [2][ 20/338]  lr: 9.8929e-04  eta: 1:04:49  time: 0.5140  data_time: 0.0066  memory: 1822  loss: 0.1901  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1901
2024/11/21 18:16:22 - mmengine - INFO - Epoch(train)  [2][ 40/338]  lr: 9.8806e-04  eta: 1:03:30  time: 0.5322  data_time: 0.0033  memory: 1978  loss: 0.1272  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1272
2024/11/21 18:16:34 - mmengine - INFO - Epoch(train)  [2][ 60/338]  lr: 9.8676e-04  eta: 1:02:38  time: 0.6118  data_time: 0.0058  memory: 1792  loss: 0.1613  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.1613
2024/11/21 18:16:47 - mmengine - INFO - Epoch(train)  [2][ 80/338]  lr: 9.8540e-04  eta: 1:02:00  time: 0.6533  data_time: 0.0093  memory: 2136  loss: 0.1315  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1315
2024/11/21 18:16:59 - mmengine - INFO - Epoch(train)  [2][100/338]  lr: 9.8398e-04  eta: 1:01:07  time: 0.5779  data_time: 0.0060  memory: 1752  loss: 0.1338  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1338
2024/11/21 18:17:10 - mmengine - INFO - Epoch(train)  [2][120/338]  lr: 9.8248e-04  eta: 1:00:15  time: 0.5672  data_time: 0.0051  memory: 1850  loss: 0.1611  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1611
2024/11/21 18:17:21 - mmengine - INFO - Epoch(train)  [2][140/338]  lr: 9.8093e-04  eta: 0:59:25  time: 0.5590  data_time: 0.0047  memory: 2136  loss: 0.1617  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1617
2024/11/21 18:17:32 - mmengine - INFO - Epoch(train)  [2][160/338]  lr: 9.7931e-04  eta: 0:58:34  time: 0.5343  data_time: 0.0040  memory: 1978  loss: 0.1346  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1346
2024/11/21 18:17:43 - mmengine - INFO - Epoch(train)  [2][180/338]  lr: 9.7762e-04  eta: 0:57:48  time: 0.5497  data_time: 0.0047  memory: 1753  loss: 0.1046  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1046
2024/11/21 18:17:54 - mmengine - INFO - Epoch(train)  [2][200/338]  lr: 9.7587e-04  eta: 0:57:04  time: 0.5479  data_time: 0.0039  memory: 1850  loss: 0.0924  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0924
2024/11/21 18:18:05 - mmengine - INFO - Epoch(train)  [2][220/338]  lr: 9.7405e-04  eta: 0:56:21  time: 0.5355  data_time: 0.0047  memory: 1932  loss: 0.1272  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1272
2024/11/21 18:18:16 - mmengine - INFO - Epoch(train)  [2][240/338]  lr: 9.7217e-04  eta: 0:55:43  time: 0.5521  data_time: 0.0038  memory: 1978  loss: 0.0883  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0883
2024/11/21 18:18:27 - mmengine - INFO - Epoch(train)  [2][260/338]  lr: 9.7023e-04  eta: 0:55:04  time: 0.5374  data_time: 0.0046  memory: 1978  loss: 0.1098  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1098
2024/11/21 18:18:38 - mmengine - INFO - Epoch(train)  [2][280/338]  lr: 9.6823e-04  eta: 0:54:30  time: 0.5530  data_time: 0.0039  memory: 1904  loss: 0.1979  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1979
2024/11/21 18:18:48 - mmengine - INFO - Epoch(train)  [2][300/338]  lr: 9.6616e-04  eta: 0:53:54  time: 0.5370  data_time: 0.0047  memory: 1676  loss: 0.0806  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0806
2024/11/21 18:19:00 - mmengine - INFO - Epoch(train)  [2][320/338]  lr: 9.6402e-04  eta: 0:53:28  time: 0.5913  data_time: 0.0043  memory: 1932  loss: 0.0470  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0470
2024/11/21 18:19:11 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:19:11 - mmengine - INFO - Epoch(train)  [2][338/338]  lr: 9.6205e-04  eta: 0:53:09  time: 0.6056  data_time: 0.0040  memory: 1978  loss: 0.0726  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0726
2024/11/21 18:19:11 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/11/21 18:19:18 - mmengine - INFO - Epoch(val) [2][13/13]    acc/top1: 0.9100  acc/top5: 1.0000  acc/mean1: 0.9100  confusion_matrix/result: 
tensor([[97,  3],
        [15, 85]])
  data_time: 0.0049  time: 0.3384
2024/11/21 18:19:18 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\loso_2class_all\loso_split_s08.pkl_lr_0.001_bs_16_repeat_3\best_acc_top1_epoch_1.pth is removed
2024/11/21 18:19:19 - mmengine - INFO - The best checkpoint with 0.9100 acc/top1 at 2 epoch is saved to best_acc_top1_epoch_2.pth.
2024/11/21 18:19:32 - mmengine - INFO - Epoch(train)  [3][ 20/338]  lr: 9.5980e-04  eta: 0:52:40  time: 0.5645  data_time: 0.0074  memory: 1753  loss: 0.0515  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0515
2024/11/21 18:19:43 - mmengine - INFO - Epoch(train)  [3][ 40/338]  lr: 9.5749e-04  eta: 0:52:11  time: 0.5521  data_time: 0.0043  memory: 1978  loss: 0.0710  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0710
2024/11/21 18:19:54 - mmengine - INFO - Epoch(train)  [3][ 60/338]  lr: 9.5511e-04  eta: 0:51:44  time: 0.5531  data_time: 0.0047  memory: 2136  loss: 0.1178  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1178
2024/11/21 18:20:05 - mmengine - INFO - Epoch(train)  [3][ 80/338]  lr: 9.5268e-04  eta: 0:51:16  time: 0.5466  data_time: 0.0046  memory: 2136  loss: 0.1584  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1584
2024/11/21 18:20:17 - mmengine - INFO - Epoch(train)  [3][100/338]  lr: 9.5018e-04  eta: 0:50:50  time: 0.5570  data_time: 0.0059  memory: 1752  loss: 0.0809  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0809
2024/11/21 18:20:27 - mmengine - INFO - Epoch(train)  [3][120/338]  lr: 9.4762e-04  eta: 0:50:21  time: 0.5214  data_time: 0.0041  memory: 1753  loss: 0.0698  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0698
2024/11/21 18:20:37 - mmengine - INFO - Epoch(train)  [3][140/338]  lr: 9.4500e-04  eta: 0:49:53  time: 0.5233  data_time: 0.0051  memory: 1676  loss: 0.0549  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0549
2024/11/21 18:20:49 - mmengine - INFO - Epoch(train)  [3][160/338]  lr: 9.4232e-04  eta: 0:49:30  time: 0.5582  data_time: 0.0043  memory: 1822  loss: 0.0979  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0979
2024/11/21 18:20:59 - mmengine - INFO - Epoch(train)  [3][180/338]  lr: 9.3958e-04  eta: 0:49:05  time: 0.5407  data_time: 0.0054  memory: 1932  loss: 0.0748  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0748
2024/11/21 18:21:10 - mmengine - INFO - Epoch(train)  [3][200/338]  lr: 9.3679e-04  eta: 0:48:41  time: 0.5393  data_time: 0.0043  memory: 1904  loss: 0.0659  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0659
2024/11/21 18:21:21 - mmengine - INFO - Epoch(train)  [3][220/338]  lr: 9.3393e-04  eta: 0:48:18  time: 0.5397  data_time: 0.0051  memory: 1676  loss: 0.0560  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0560
2024/11/21 18:21:32 - mmengine - INFO - Epoch(train)  [3][240/338]  lr: 9.3101e-04  eta: 0:47:53  time: 0.5267  data_time: 0.0045  memory: 1978  loss: 0.0483  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0483
2024/11/21 18:21:42 - mmengine - INFO - Epoch(train)  [3][260/338]  lr: 9.2804e-04  eta: 0:47:31  time: 0.5346  data_time: 0.0049  memory: 1614  loss: 0.0600  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0600
2024/11/21 18:21:53 - mmengine - INFO - Epoch(train)  [3][280/338]  lr: 9.2501e-04  eta: 0:47:09  time: 0.5404  data_time: 0.0043  memory: 1792  loss: 0.0233  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0233
2024/11/21 18:22:04 - mmengine - INFO - Epoch(train)  [3][300/338]  lr: 9.2192e-04  eta: 0:46:49  time: 0.5542  data_time: 0.0053  memory: 2136  loss: 0.0762  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0762
2024/11/21 18:22:15 - mmengine - INFO - Epoch(train)  [3][320/338]  lr: 9.1878e-04  eta: 0:46:28  time: 0.5399  data_time: 0.0044  memory: 1978  loss: 0.0709  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0709
2024/11/21 18:22:17 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:22:25 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:22:25 - mmengine - INFO - Epoch(train)  [3][338/338]  lr: 9.1590e-04  eta: 0:46:10  time: 0.5498  data_time: 0.0044  memory: 1822  loss: 0.0436  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0436
2024/11/21 18:22:25 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/11/21 18:22:30 - mmengine - INFO - Epoch(val) [3][13/13]    acc/top1: 0.8700  acc/top5: 1.0000  acc/mean1: 0.8700  confusion_matrix/result: 
tensor([[90, 10],
        [16, 84]])
  data_time: 0.0053  time: 0.3134
2024/11/21 18:22:42 - mmengine - INFO - Epoch(train)  [4][ 20/338]  lr: 9.1264e-04  eta: 0:45:51  time: 0.5644  data_time: 0.0059  memory: 2136  loss: 0.0443  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0443
2024/11/21 18:22:53 - mmengine - INFO - Epoch(train)  [4][ 40/338]  lr: 9.0934e-04  eta: 0:45:32  time: 0.5513  data_time: 0.0043  memory: 1932  loss: 0.1171  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1171
2024/11/21 18:23:03 - mmengine - INFO - Epoch(train)  [4][ 60/338]  lr: 9.0597e-04  eta: 0:45:11  time: 0.5243  data_time: 0.0051  memory: 1932  loss: 0.0835  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0835
2024/11/21 18:23:14 - mmengine - INFO - Epoch(train)  [4][ 80/338]  lr: 9.0255e-04  eta: 0:44:52  time: 0.5356  data_time: 0.0041  memory: 1978  loss: 0.0302  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0302
2024/11/21 18:23:24 - mmengine - INFO - Epoch(train)  [4][100/338]  lr: 8.9908e-04  eta: 0:44:32  time: 0.5330  data_time: 0.0050  memory: 2136  loss: 0.0370  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0370
2024/11/21 18:23:35 - mmengine - INFO - Epoch(train)  [4][120/338]  lr: 8.9555e-04  eta: 0:44:13  time: 0.5370  data_time: 0.0043  memory: 1978  loss: 0.0172  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0172
2024/11/21 18:23:46 - mmengine - INFO - Epoch(train)  [4][140/338]  lr: 8.9197e-04  eta: 0:43:54  time: 0.5245  data_time: 0.0050  memory: 2136  loss: 0.0255  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0255
2024/11/21 18:23:57 - mmengine - INFO - Epoch(train)  [4][160/338]  lr: 8.8834e-04  eta: 0:43:37  time: 0.5547  data_time: 0.0042  memory: 1978  loss: 0.0470  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0470
2024/11/21 18:24:07 - mmengine - INFO - Epoch(train)  [4][180/338]  lr: 8.8466e-04  eta: 0:43:17  time: 0.5120  data_time: 0.0050  memory: 1619  loss: 0.0874  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0874
2024/11/21 18:24:18 - mmengine - INFO - Epoch(train)  [4][200/338]  lr: 8.8092e-04  eta: 0:43:00  time: 0.5441  data_time: 0.0042  memory: 1978  loss: 0.0519  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0519
2024/11/21 18:24:29 - mmengine - INFO - Epoch(train)  [4][220/338]  lr: 8.7713e-04  eta: 0:42:42  time: 0.5412  data_time: 0.0048  memory: 1752  loss: 0.0322  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0322
2024/11/21 18:24:40 - mmengine - INFO - Epoch(train)  [4][240/338]  lr: 8.7329e-04  eta: 0:42:26  time: 0.5474  data_time: 0.0043  memory: 1822  loss: 0.0285  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0285
2024/11/21 18:24:50 - mmengine - INFO - Epoch(train)  [4][260/338]  lr: 8.6940e-04  eta: 0:42:07  time: 0.5203  data_time: 0.0051  memory: 1792  loss: 0.0675  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.0675
2024/11/21 18:25:01 - mmengine - INFO - Epoch(train)  [4][280/338]  lr: 8.6546e-04  eta: 0:41:50  time: 0.5366  data_time: 0.0042  memory: 1850  loss: 0.0521  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0521
2024/11/21 18:25:11 - mmengine - INFO - Epoch(train)  [4][300/338]  lr: 8.6147e-04  eta: 0:41:32  time: 0.5112  data_time: 0.0050  memory: 1753  loss: 0.0413  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0413
2024/11/21 18:25:22 - mmengine - INFO - Epoch(train)  [4][320/338]  lr: 8.5743e-04  eta: 0:41:16  time: 0.5479  data_time: 0.0044  memory: 1904  loss: 0.0260  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0260
2024/11/21 18:25:31 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:25:31 - mmengine - INFO - Epoch(train)  [4][338/338]  lr: 8.5376e-04  eta: 0:41:01  time: 0.5337  data_time: 0.0042  memory: 1932  loss: 0.0201  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0201
2024/11/21 18:25:31 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/11/21 18:25:37 - mmengine - INFO - Epoch(val) [4][13/13]    acc/top1: 0.9050  acc/top5: 1.0000  acc/mean1: 0.9050  confusion_matrix/result: 
tensor([[91,  9],
        [10, 90]])
  data_time: 0.0052  time: 0.3277
2024/11/21 18:25:48 - mmengine - INFO - Epoch(train)  [5][ 20/338]  lr: 8.4963e-04  eta: 0:40:44  time: 0.5284  data_time: 0.0059  memory: 1978  loss: 0.0158  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0158
2024/11/21 18:25:59 - mmengine - INFO - Epoch(train)  [5][ 40/338]  lr: 8.4545e-04  eta: 0:40:29  time: 0.5524  data_time: 0.0044  memory: 2136  loss: 0.0103  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0103
2024/11/21 18:26:10 - mmengine - INFO - Epoch(train)  [5][ 60/338]  lr: 8.4123e-04  eta: 0:40:14  time: 0.5538  data_time: 0.0049  memory: 1978  loss: 0.0270  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0270
2024/11/21 18:26:22 - mmengine - INFO - Epoch(train)  [5][ 80/338]  lr: 8.3696e-04  eta: 0:40:00  time: 0.5801  data_time: 0.0047  memory: 2136  loss: 0.0106  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0106
2024/11/21 18:26:33 - mmengine - INFO - Epoch(train)  [5][100/338]  lr: 8.3265e-04  eta: 0:39:47  time: 0.5816  data_time: 0.0056  memory: 1850  loss: 0.0258  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0258
2024/11/21 18:26:44 - mmengine - INFO - Epoch(train)  [5][120/338]  lr: 8.2829e-04  eta: 0:39:32  time: 0.5536  data_time: 0.0042  memory: 1932  loss: 0.0178  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0178
2024/11/21 18:26:56 - mmengine - INFO - Epoch(train)  [5][140/338]  lr: 8.2388e-04  eta: 0:39:18  time: 0.5630  data_time: 0.0048  memory: 1932  loss: 0.0093  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0093
2024/11/21 18:27:07 - mmengine - INFO - Epoch(train)  [5][160/338]  lr: 8.1944e-04  eta: 0:39:03  time: 0.5490  data_time: 0.0042  memory: 1904  loss: 0.0643  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0643
2024/11/21 18:27:18 - mmengine - INFO - Epoch(train)  [5][180/338]  lr: 8.1495e-04  eta: 0:38:49  time: 0.5627  data_time: 0.0060  memory: 1788  loss: 0.0366  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0366
2024/11/21 18:27:28 - mmengine - INFO - Epoch(train)  [5][200/338]  lr: 8.1041e-04  eta: 0:38:34  time: 0.5281  data_time: 0.0043  memory: 1643  loss: 0.0906  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0906
2024/11/21 18:27:39 - mmengine - INFO - Epoch(train)  [5][220/338]  lr: 8.0584e-04  eta: 0:38:19  time: 0.5463  data_time: 0.0049  memory: 1753  loss: 0.0364  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0364
2024/11/21 18:27:50 - mmengine - INFO - Epoch(train)  [5][240/338]  lr: 8.0122e-04  eta: 0:38:04  time: 0.5425  data_time: 0.0042  memory: 1753  loss: 0.0584  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0584
2024/11/21 18:28:01 - mmengine - INFO - Epoch(train)  [5][260/338]  lr: 7.9656e-04  eta: 0:37:49  time: 0.5361  data_time: 0.0050  memory: 1792  loss: 0.0370  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0370
2024/11/21 18:28:12 - mmengine - INFO - Epoch(train)  [5][280/338]  lr: 7.9187e-04  eta: 0:37:34  time: 0.5337  data_time: 0.0041  memory: 1978  loss: 0.0298  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0298
2024/11/21 18:28:23 - mmengine - INFO - Epoch(train)  [5][300/338]  lr: 7.8713e-04  eta: 0:37:20  time: 0.5475  data_time: 0.0049  memory: 2136  loss: 0.0472  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0472
2024/11/21 18:28:33 - mmengine - INFO - Epoch(train)  [5][320/338]  lr: 7.8236e-04  eta: 0:37:06  time: 0.5465  data_time: 0.0041  memory: 1978  loss: 0.0165  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0165
2024/11/21 18:28:43 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:28:43 - mmengine - INFO - Epoch(train)  [5][338/338]  lr: 7.7803e-04  eta: 0:36:52  time: 0.5270  data_time: 0.0042  memory: 1822  loss: 0.0181  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0181
2024/11/21 18:28:43 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/11/21 18:28:48 - mmengine - INFO - Epoch(val) [5][13/13]    acc/top1: 0.9100  acc/top5: 1.0000  acc/mean1: 0.9100  confusion_matrix/result: 
tensor([[94,  6],
        [12, 88]])
  data_time: 0.0051  time: 0.3138
2024/11/21 18:28:59 - mmengine - INFO - Epoch(train)  [6][ 20/338]  lr: 7.7318e-04  eta: 0:36:38  time: 0.5421  data_time: 0.0063  memory: 1822  loss: 0.0282  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0282
2024/11/21 18:29:11 - mmengine - INFO - Epoch(train)  [6][ 40/338]  lr: 7.6830e-04  eta: 0:36:25  time: 0.5719  data_time: 0.0040  memory: 2136  loss: 0.0299  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0299
2024/11/21 18:29:21 - mmengine - INFO - Epoch(train)  [6][ 60/338]  lr: 7.6338e-04  eta: 0:36:10  time: 0.5212  data_time: 0.0048  memory: 1644  loss: 0.0155  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0155
2024/11/21 18:29:32 - mmengine - INFO - Epoch(train)  [6][ 80/338]  lr: 7.5842e-04  eta: 0:35:57  time: 0.5669  data_time: 0.0041  memory: 1932  loss: 0.0063  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0063
2024/11/21 18:29:43 - mmengine - INFO - Epoch(train)  [6][100/338]  lr: 7.5343e-04  eta: 0:35:43  time: 0.5313  data_time: 0.0051  memory: 1904  loss: 0.0107  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0107
2024/11/21 18:29:54 - mmengine - INFO - Epoch(train)  [6][120/338]  lr: 7.4841e-04  eta: 0:35:30  time: 0.5613  data_time: 0.0042  memory: 1792  loss: 0.0153  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0153
2024/11/21 18:30:06 - mmengine - INFO - Epoch(train)  [6][140/338]  lr: 7.4335e-04  eta: 0:35:17  time: 0.5671  data_time: 0.0055  memory: 2136  loss: 0.0114  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0114
2024/11/21 18:30:16 - mmengine - INFO - Epoch(train)  [6][160/338]  lr: 7.3826e-04  eta: 0:35:03  time: 0.5392  data_time: 0.0039  memory: 1978  loss: 0.0297  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0297
2024/11/21 18:30:27 - mmengine - INFO - Epoch(train)  [6][180/338]  lr: 7.3313e-04  eta: 0:34:50  time: 0.5469  data_time: 0.0048  memory: 1850  loss: 0.0257  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0257
2024/11/21 18:30:38 - mmengine - INFO - Epoch(train)  [6][200/338]  lr: 7.2798e-04  eta: 0:34:36  time: 0.5443  data_time: 0.0044  memory: 1792  loss: 0.0145  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0145
2024/11/21 18:30:53 - mmengine - INFO - Epoch(train)  [6][220/338]  lr: 7.2279e-04  eta: 0:34:30  time: 0.7296  data_time: 0.0086  memory: 1752  loss: 0.0159  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0159
2024/11/21 18:31:05 - mmengine - INFO - Epoch(train)  [6][240/338]  lr: 7.1758e-04  eta: 0:34:18  time: 0.6026  data_time: 0.0072  memory: 1978  loss: 0.0229  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0229
2024/11/21 18:31:17 - mmengine - INFO - Epoch(train)  [6][260/338]  lr: 7.1233e-04  eta: 0:34:06  time: 0.5809  data_time: 0.0053  memory: 1932  loss: 0.0117  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0117
2024/11/21 18:31:27 - mmengine - INFO - Epoch(train)  [6][280/338]  lr: 7.0706e-04  eta: 0:33:52  time: 0.5449  data_time: 0.0041  memory: 1644  loss: 0.0114  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0114
2024/11/21 18:31:38 - mmengine - INFO - Epoch(train)  [6][300/338]  lr: 7.0176e-04  eta: 0:33:39  time: 0.5480  data_time: 0.0049  memory: 2136  loss: 0.0045  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0045
2024/11/21 18:31:44 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:31:49 - mmengine - INFO - Epoch(train)  [6][320/338]  lr: 6.9643e-04  eta: 0:33:25  time: 0.5318  data_time: 0.0040  memory: 1978  loss: 0.0055  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0055
2024/11/21 18:31:59 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_180852
2024/11/21 18:31:59 - mmengine - INFO - Epoch(train)  [6][338/338]  lr: 6.9161e-04  eta: 0:33:13  time: 0.5381  data_time: 0.0041  memory: 1978  loss: 0.0141  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.0141
2024/11/21 18:31:59 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/11/21 18:32:05 - mmengine - INFO - Epoch(val) [6][13/13]    acc/top1: 0.8650  acc/top5: 1.0000  acc/mean1: 0.8650  confusion_matrix/result: 
tensor([[83, 17],
        [10, 90]])
  data_time: 0.0051  time: 0.3267
2024/11/21 18:32:05 - mmengine - INFO - the monitored metric did not improve in the last 5 records. best score: 0.870. 
2024/11/21 18:32:09 - mmengine - INFO - Epoch(val) [6][13/13]    acc/top1: 0.8650  acc/top5: 1.0000  acc/mean1: 0.8650  confusion_matrix/result: 
tensor([[83, 17],
        [10, 90]])
  data_time: 0.0040  time: 0.2496
2024/11/21 18:32:09 - mmengine - INFO - the monitored metric did not improve in the last 6 records. best score: 0.870. 
