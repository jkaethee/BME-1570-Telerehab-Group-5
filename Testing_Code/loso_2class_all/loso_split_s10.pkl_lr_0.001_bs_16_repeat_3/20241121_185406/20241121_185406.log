2024/11/21 18:54:10 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce GTX 1650
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64
    GCC: n/a
    PyTorch: 2.4.1+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2024.2.1-Product Build 20240722 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 90.1
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=9.1.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.1+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    diff_rank_seed: False
    deterministic: True
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/11/21 18:54:12 - mmengine - INFO - Config:
ann_file = '../datasets/80-20-split/80_20.pkl'
custom_layout = dict(
    center=0,
    inward=[
        (
            1,
            0,
        ),
        (
            2,
            1,
        ),
        (
            3,
            2,
        ),
        (
            4,
            3,
        ),
        (
            5,
            4,
        ),
        (
            6,
            3,
        ),
        (
            7,
            6,
        ),
        (
            8,
            7,
        ),
        (
            9,
            8,
        ),
        (
            10,
            3,
        ),
        (
            11,
            10,
        ),
        (
            12,
            11,
        ),
        (
            13,
            12,
        ),
        (
            14,
            0,
        ),
        (
            15,
            14,
        ),
        (
            16,
            15,
        ),
        (
            17,
            16,
        ),
        (
            18,
            0,
        ),
        (
            19,
            18,
        ),
        (
            20,
            19,
        ),
        (
            21,
            20,
        ),
    ],
    num_node=22)
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, save_best='auto', type='CheckpointHook'),
    early_stop=dict(
        monitor='acc/top1',
        patience=5,
        rule='greater',
        type='EarlyStoppingHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'modified_checkpoint.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
loso_dir = '../loso'
model = dict(
    backbone=dict(
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(
            layout=dict(
                center=0,
                inward=[
                    (
                        1,
                        0,
                    ),
                    (
                        2,
                        1,
                    ),
                    (
                        3,
                        2,
                    ),
                    (
                        4,
                        3,
                    ),
                    (
                        5,
                        4,
                    ),
                    (
                        6,
                        3,
                    ),
                    (
                        7,
                        6,
                    ),
                    (
                        8,
                        7,
                    ),
                    (
                        9,
                        8,
                    ),
                    (
                        10,
                        3,
                    ),
                    (
                        11,
                        10,
                    ),
                    (
                        12,
                        11,
                    ),
                    (
                        13,
                        12,
                    ),
                    (
                        14,
                        0,
                    ),
                    (
                        15,
                        14,
                    ),
                    (
                        16,
                        15,
                    ),
                    (
                        17,
                        16,
                    ),
                    (
                        18,
                        0,
                    ),
                    (
                        19,
                        18,
                    ),
                    (
                        20,
                        19,
                    ),
                    (
                        21,
                        20,
                    ),
                ],
                num_node=22),
            mode='stgcn_spatial'),
        in_channels=3,
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(in_channels=256, num_classes=2, type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.001, momentum=0.9, nesterov=True, type='SGD',
        weight_decay=0.0005))
param_scheduler = [
    dict(
        T_max=16,
        by_epoch=True,
        convert_to_iter_based=True,
        eta_min=0,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=True, diff_rank_seed=False, seed=0)
resume = False
train_cfg = dict(
    max_epochs=16, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        dataset=dict(
            ann_file='..\\datasets\\2class-all\\loso_split_s10.pkl',
            pipeline=[
                dict(dataset='coco', feats=[
                    'jm',
                ], type='GenSkeFeat'),
                dict(type='PoseDecode'),
                dict(num_person=1, type='FormatGCNInput'),
                dict(type='PackActionInputs'),
            ],
            split='xsub_train',
            type='PoseDataset'),
        times=3,
        type='RepeatDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='..\\datasets\\2class-all\\loso_split_s10.pkl',
        pipeline=[
            dict(dataset='coco', feats=[
                'jm',
            ], type='GenSkeFeat'),
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(type='AccMetric'),
    dict(num_classes=2, type='ConfusionMatrix'),
]
val_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './loso_2class_all/loso_split_s10.pkl_lr_0.001_bs_16_repeat_3'

2024/11/21 18:55:33 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/11/21 18:55:33 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/11/21 18:55:34 - mmengine - INFO - 1800 videos remain after valid thresholding
2024/11/21 18:55:34 - mmengine - INFO - 200 videos remain after valid thresholding
Name of parameter - Initialization information

backbone.data_bn.weight - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.data_bn.bias - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.weight - torch.Size([192, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.weight - torch.Size([64, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.weight - torch.Size([384, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.weight - torch.Size([768, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.conv.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

cls_head.fc.weight - torch.Size([2, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

cls_head.fc.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 
2024/11/21 18:55:36 - mmengine - INFO - Load checkpoint from modified_checkpoint.pth
2024/11/21 18:55:36 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/11/21 18:55:36 - mmengine - INFO - Checkpoints will be saved to C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\loso_2class_all\loso_split_s10.pkl_lr_0.001_bs_16_repeat_3.
2024/11/21 18:56:30 - mmengine - INFO - Epoch(train)  [1][ 20/338]  lr: 9.9997e-04  eta: 3:59:32  time: 2.6676  data_time: 2.1982  memory: 1978  loss: 0.7269  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.7269
2024/11/21 18:56:39 - mmengine - INFO - Epoch(train)  [1][ 40/338]  lr: 9.9987e-04  eta: 2:21:20  time: 0.4920  data_time: 0.0036  memory: 1932  loss: 0.4717  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.4717
2024/11/21 18:56:49 - mmengine - INFO - Epoch(train)  [1][ 60/338]  lr: 9.9971e-04  eta: 1:48:24  time: 0.4892  data_time: 0.0034  memory: 1788  loss: 0.3924  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.3924
2024/11/21 18:56:59 - mmengine - INFO - Epoch(train)  [1][ 80/338]  lr: 9.9947e-04  eta: 1:31:54  time: 0.4910  data_time: 0.0041  memory: 1978  loss: 0.3757  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.3757
2024/11/21 18:57:09 - mmengine - INFO - Epoch(train)  [1][100/338]  lr: 9.9917e-04  eta: 1:22:04  time: 0.4990  data_time: 0.0037  memory: 1643  loss: 0.3248  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.3248
2024/11/21 18:57:20 - mmengine - INFO - Epoch(train)  [1][120/338]  lr: 9.9881e-04  eta: 1:16:27  time: 0.5668  data_time: 0.0047  memory: 1639  loss: 0.2273  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2273
2024/11/21 18:57:31 - mmengine - INFO - Epoch(train)  [1][140/338]  lr: 9.9837e-04  eta: 1:12:14  time: 0.5547  data_time: 0.0041  memory: 1850  loss: 0.2709  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2709
2024/11/21 18:57:42 - mmengine - INFO - Epoch(train)  [1][160/338]  lr: 9.9787e-04  eta: 1:08:54  time: 0.5422  data_time: 0.0049  memory: 1792  loss: 0.2123  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2123
2024/11/21 18:57:53 - mmengine - INFO - Epoch(train)  [1][180/338]  lr: 9.9730e-04  eta: 1:06:20  time: 0.5495  data_time: 0.0038  memory: 2136  loss: 0.2737  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2737
2024/11/21 18:58:04 - mmengine - INFO - Epoch(train)  [1][200/338]  lr: 9.9666e-04  eta: 1:04:20  time: 0.5602  data_time: 0.0046  memory: 1978  loss: 0.2506  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2506
2024/11/21 18:58:16 - mmengine - INFO - Epoch(train)  [1][220/338]  lr: 9.9596e-04  eta: 1:02:38  time: 0.5579  data_time: 0.0039  memory: 1978  loss: 0.2293  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2293
2024/11/21 18:58:27 - mmengine - INFO - Epoch(train)  [1][240/338]  lr: 9.9519e-04  eta: 1:01:19  time: 0.5729  data_time: 0.0048  memory: 2136  loss: 0.1959  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.1959
2024/11/21 18:58:38 - mmengine - INFO - Epoch(train)  [1][260/338]  lr: 9.9435e-04  eta: 1:00:09  time: 0.5725  data_time: 0.0038  memory: 1978  loss: 0.1683  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1683
2024/11/21 18:58:50 - mmengine - INFO - Epoch(train)  [1][280/338]  lr: 9.9345e-04  eta: 0:59:02  time: 0.5554  data_time: 0.0047  memory: 1752  loss: 0.1716  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1716
2024/11/21 18:59:01 - mmengine - INFO - Epoch(train)  [1][300/338]  lr: 9.9248e-04  eta: 0:57:59  time: 0.5463  data_time: 0.0036  memory: 2136  loss: 0.2475  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2475
2024/11/21 18:59:11 - mmengine - INFO - Epoch(train)  [1][320/338]  lr: 9.9144e-04  eta: 0:56:55  time: 0.5249  data_time: 0.0047  memory: 1904  loss: 0.0901  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0901
2024/11/21 18:59:21 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 18:59:21 - mmengine - INFO - Epoch(train)  [1][338/338]  lr: 9.9045e-04  eta: 0:56:11  time: 0.5608  data_time: 0.0040  memory: 1752  loss: 0.1710  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.1710
2024/11/21 18:59:21 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/11/21 19:00:22 - mmengine - INFO - Epoch(val) [1][13/13]    acc/top1: 0.8450  acc/top5: 1.0000  acc/mean1: 0.8450  confusion_matrix/result: 
tensor([[77, 23],
        [ 8, 92]])
  data_time: 4.3615  time: 4.5507
2024/11/21 19:00:23 - mmengine - INFO - The best checkpoint with 0.8450 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
2024/11/21 19:00:33 - mmengine - INFO - Epoch(train)  [2][ 20/338]  lr: 9.8929e-04  eta: 0:55:03  time: 0.4695  data_time: 0.0054  memory: 1822  loss: 0.1730  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1730
2024/11/21 19:00:43 - mmengine - INFO - Epoch(train)  [2][ 40/338]  lr: 9.8806e-04  eta: 0:54:02  time: 0.4733  data_time: 0.0040  memory: 1978  loss: 0.1061  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1061
2024/11/21 19:00:53 - mmengine - INFO - Epoch(train)  [2][ 60/338]  lr: 9.8676e-04  eta: 0:53:17  time: 0.5192  data_time: 0.0043  memory: 1792  loss: 0.1619  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1619
2024/11/21 19:01:04 - mmengine - INFO - Epoch(train)  [2][ 80/338]  lr: 9.8540e-04  eta: 0:52:39  time: 0.5314  data_time: 0.0036  memory: 2136  loss: 0.1495  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1495
2024/11/21 19:01:15 - mmengine - INFO - Epoch(train)  [2][100/338]  lr: 9.8398e-04  eta: 0:52:06  time: 0.5424  data_time: 0.0046  memory: 1752  loss: 0.1479  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1479
2024/11/21 19:01:26 - mmengine - INFO - Epoch(train)  [2][120/338]  lr: 9.8248e-04  eta: 0:51:36  time: 0.5502  data_time: 0.0041  memory: 1850  loss: 0.1618  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1618
2024/11/21 19:01:37 - mmengine - INFO - Epoch(train)  [2][140/338]  lr: 9.8093e-04  eta: 0:51:11  time: 0.5627  data_time: 0.0047  memory: 2136  loss: 0.1464  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1464
2024/11/21 19:01:48 - mmengine - INFO - Epoch(train)  [2][160/338]  lr: 9.7931e-04  eta: 0:50:42  time: 0.5394  data_time: 0.0041  memory: 1978  loss: 0.1459  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1459
2024/11/21 19:01:59 - mmengine - INFO - Epoch(train)  [2][180/338]  lr: 9.7762e-04  eta: 0:50:16  time: 0.5472  data_time: 0.0048  memory: 1753  loss: 0.0668  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0668
2024/11/21 19:02:09 - mmengine - INFO - Epoch(train)  [2][200/338]  lr: 9.7587e-04  eta: 0:49:49  time: 0.5360  data_time: 0.0040  memory: 1850  loss: 0.0923  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.0923
2024/11/21 19:02:20 - mmengine - INFO - Epoch(train)  [2][220/338]  lr: 9.7405e-04  eta: 0:49:23  time: 0.5348  data_time: 0.0046  memory: 1932  loss: 0.1124  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1124
2024/11/21 19:02:31 - mmengine - INFO - Epoch(train)  [2][240/338]  lr: 9.7217e-04  eta: 0:49:02  time: 0.5603  data_time: 0.0038  memory: 1978  loss: 0.0760  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0760
2024/11/21 19:02:42 - mmengine - INFO - Epoch(train)  [2][260/338]  lr: 9.7023e-04  eta: 0:48:42  time: 0.5623  data_time: 0.0052  memory: 1978  loss: 0.0811  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0811
2024/11/21 19:02:54 - mmengine - INFO - Epoch(train)  [2][280/338]  lr: 9.6823e-04  eta: 0:48:22  time: 0.5561  data_time: 0.0038  memory: 1904  loss: 0.1736  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1736
2024/11/21 19:03:05 - mmengine - INFO - Epoch(train)  [2][300/338]  lr: 9.6616e-04  eta: 0:48:03  time: 0.5594  data_time: 0.0052  memory: 1676  loss: 0.0860  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0860
2024/11/21 19:03:16 - mmengine - INFO - Epoch(train)  [2][320/338]  lr: 9.6402e-04  eta: 0:47:42  time: 0.5404  data_time: 0.0036  memory: 1932  loss: 0.0685  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0685
2024/11/21 19:03:25 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:03:25 - mmengine - INFO - Epoch(train)  [2][338/338]  lr: 9.6205e-04  eta: 0:47:21  time: 0.5229  data_time: 0.0039  memory: 1978  loss: 0.0754  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0754
2024/11/21 19:03:25 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/11/21 19:03:31 - mmengine - INFO - Epoch(val) [2][13/13]    acc/top1: 0.8050  acc/top5: 1.0000  acc/mean1: 0.8050  confusion_matrix/result: 
tensor([[66, 34],
        [ 5, 95]])
  data_time: 0.0065  time: 0.3343
2024/11/21 19:03:42 - mmengine - INFO - Epoch(train)  [3][ 20/338]  lr: 9.5980e-04  eta: 0:47:01  time: 0.5392  data_time: 0.0059  memory: 1753  loss: 0.0455  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0455
2024/11/21 19:03:53 - mmengine - INFO - Epoch(train)  [3][ 40/338]  lr: 9.5749e-04  eta: 0:46:43  time: 0.5519  data_time: 0.0041  memory: 1978  loss: 0.1448  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.1448
2024/11/21 19:04:04 - mmengine - INFO - Epoch(train)  [3][ 60/338]  lr: 9.5511e-04  eta: 0:46:25  time: 0.5524  data_time: 0.0048  memory: 2136  loss: 0.0530  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0530
2024/11/21 19:04:15 - mmengine - INFO - Epoch(train)  [3][ 80/338]  lr: 9.5268e-04  eta: 0:46:06  time: 0.5362  data_time: 0.0041  memory: 2136  loss: 0.0689  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0689
2024/11/21 19:04:25 - mmengine - INFO - Epoch(train)  [3][100/338]  lr: 9.5018e-04  eta: 0:45:47  time: 0.5343  data_time: 0.0051  memory: 1752  loss: 0.1037  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1037
2024/11/21 19:04:36 - mmengine - INFO - Epoch(train)  [3][120/338]  lr: 9.4762e-04  eta: 0:45:28  time: 0.5358  data_time: 0.0042  memory: 1753  loss: 0.0809  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0809
2024/11/21 19:04:46 - mmengine - INFO - Epoch(train)  [3][140/338]  lr: 9.4500e-04  eta: 0:45:08  time: 0.5198  data_time: 0.0049  memory: 1676  loss: 0.0681  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0681
2024/11/21 19:04:58 - mmengine - INFO - Epoch(train)  [3][160/338]  lr: 9.4232e-04  eta: 0:44:53  time: 0.5630  data_time: 0.0044  memory: 1822  loss: 0.0802  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0802
2024/11/21 19:05:09 - mmengine - INFO - Epoch(train)  [3][180/338]  lr: 9.3958e-04  eta: 0:44:39  time: 0.5609  data_time: 0.0052  memory: 1932  loss: 0.0687  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0687
2024/11/21 19:05:19 - mmengine - INFO - Epoch(train)  [3][200/338]  lr: 9.3679e-04  eta: 0:44:20  time: 0.5258  data_time: 0.0041  memory: 1904  loss: 0.0480  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0480
2024/11/21 19:05:30 - mmengine - INFO - Epoch(train)  [3][220/338]  lr: 9.3393e-04  eta: 0:44:04  time: 0.5409  data_time: 0.0050  memory: 1676  loss: 0.0353  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0353
2024/11/21 19:05:41 - mmengine - INFO - Epoch(train)  [3][240/338]  lr: 9.3101e-04  eta: 0:43:48  time: 0.5392  data_time: 0.0042  memory: 1978  loss: 0.0307  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0307
2024/11/21 19:05:53 - mmengine - INFO - Epoch(train)  [3][260/338]  lr: 9.2804e-04  eta: 0:43:38  time: 0.6055  data_time: 0.0056  memory: 1614  loss: 0.0715  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0715
2024/11/21 19:06:04 - mmengine - INFO - Epoch(train)  [3][280/338]  lr: 9.2501e-04  eta: 0:43:22  time: 0.5351  data_time: 0.0042  memory: 1792  loss: 0.0649  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0649
2024/11/21 19:06:15 - mmengine - INFO - Epoch(train)  [3][300/338]  lr: 9.2192e-04  eta: 0:43:06  time: 0.5467  data_time: 0.0050  memory: 2136  loss: 0.0872  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0872
2024/11/21 19:06:25 - mmengine - INFO - Epoch(train)  [3][320/338]  lr: 9.1878e-04  eta: 0:42:50  time: 0.5257  data_time: 0.0039  memory: 1978  loss: 0.0737  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0737
2024/11/21 19:06:27 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:06:35 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:06:35 - mmengine - INFO - Epoch(train)  [3][338/338]  lr: 9.1590e-04  eta: 0:42:35  time: 0.5298  data_time: 0.0042  memory: 1822  loss: 0.0220  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0220
2024/11/21 19:06:35 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/11/21 19:06:42 - mmengine - INFO - Epoch(val) [3][13/13]    acc/top1: 0.8850  acc/top5: 1.0000  acc/mean1: 0.8850  confusion_matrix/result: 
tensor([[83, 17],
        [ 6, 94]])
  data_time: 0.0051  time: 0.3889
2024/11/21 19:06:42 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\loso_2class_all\loso_split_s10.pkl_lr_0.001_bs_16_repeat_3\best_acc_top1_epoch_1.pth is removed
2024/11/21 19:06:43 - mmengine - INFO - The best checkpoint with 0.8850 acc/top1 at 3 epoch is saved to best_acc_top1_epoch_3.pth.
2024/11/21 19:06:56 - mmengine - INFO - Epoch(train)  [4][ 20/338]  lr: 9.1264e-04  eta: 0:42:21  time: 0.5537  data_time: 0.0076  memory: 2136  loss: 0.0298  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0298
2024/11/21 19:07:07 - mmengine - INFO - Epoch(train)  [4][ 40/338]  lr: 9.0934e-04  eta: 0:42:05  time: 0.5325  data_time: 0.0042  memory: 1932  loss: 0.0573  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0573
2024/11/21 19:07:17 - mmengine - INFO - Epoch(train)  [4][ 60/338]  lr: 9.0597e-04  eta: 0:41:50  time: 0.5286  data_time: 0.0050  memory: 1932  loss: 0.0461  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.0461
2024/11/21 19:07:30 - mmengine - INFO - Epoch(train)  [4][ 80/338]  lr: 9.0255e-04  eta: 0:41:42  time: 0.6250  data_time: 0.0051  memory: 1978  loss: 0.0665  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0665
2024/11/21 19:07:41 - mmengine - INFO - Epoch(train)  [4][100/338]  lr: 8.9908e-04  eta: 0:41:26  time: 0.5302  data_time: 0.0053  memory: 2136  loss: 0.0304  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0304
2024/11/21 19:07:52 - mmengine - INFO - Epoch(train)  [4][120/338]  lr: 8.9555e-04  eta: 0:41:12  time: 0.5460  data_time: 0.0044  memory: 1978  loss: 0.0151  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0151
2024/11/21 19:08:02 - mmengine - INFO - Epoch(train)  [4][140/338]  lr: 8.9197e-04  eta: 0:40:56  time: 0.5222  data_time: 0.0050  memory: 2136  loss: 0.0291  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0291
2024/11/21 19:08:13 - mmengine - INFO - Epoch(train)  [4][160/338]  lr: 8.8834e-04  eta: 0:40:43  time: 0.5486  data_time: 0.0042  memory: 1978  loss: 0.0346  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0346
2024/11/21 19:08:23 - mmengine - INFO - Epoch(train)  [4][180/338]  lr: 8.8466e-04  eta: 0:40:27  time: 0.5181  data_time: 0.0051  memory: 1619  loss: 0.0644  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0644
2024/11/21 19:08:34 - mmengine - INFO - Epoch(train)  [4][200/338]  lr: 8.8092e-04  eta: 0:40:13  time: 0.5351  data_time: 0.0040  memory: 1978  loss: 0.0374  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0374
2024/11/21 19:08:45 - mmengine - INFO - Epoch(train)  [4][220/338]  lr: 8.7713e-04  eta: 0:39:59  time: 0.5447  data_time: 0.0053  memory: 1752  loss: 0.0257  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0257
2024/11/21 19:08:56 - mmengine - INFO - Epoch(train)  [4][240/338]  lr: 8.7329e-04  eta: 0:39:45  time: 0.5310  data_time: 0.0041  memory: 1822  loss: 0.0238  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0238
2024/11/21 19:09:06 - mmengine - INFO - Epoch(train)  [4][260/338]  lr: 8.6940e-04  eta: 0:39:29  time: 0.5091  data_time: 0.0050  memory: 1792  loss: 0.0416  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.0416
2024/11/21 19:09:16 - mmengine - INFO - Epoch(train)  [4][280/338]  lr: 8.6546e-04  eta: 0:39:15  time: 0.5299  data_time: 0.0042  memory: 1850  loss: 0.0350  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0350
2024/11/21 19:09:27 - mmengine - INFO - Epoch(train)  [4][300/338]  lr: 8.6147e-04  eta: 0:39:00  time: 0.5145  data_time: 0.0048  memory: 1753  loss: 0.0128  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0128
2024/11/21 19:09:37 - mmengine - INFO - Epoch(train)  [4][320/338]  lr: 8.5743e-04  eta: 0:38:46  time: 0.5396  data_time: 0.0043  memory: 1904  loss: 0.0232  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0232
2024/11/21 19:09:47 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:09:47 - mmengine - INFO - Epoch(train)  [4][338/338]  lr: 8.5376e-04  eta: 0:38:34  time: 0.5376  data_time: 0.0040  memory: 1932  loss: 0.0139  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0139
2024/11/21 19:09:47 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/11/21 19:09:53 - mmengine - INFO - Epoch(val) [4][13/13]    acc/top1: 0.8550  acc/top5: 1.0000  acc/mean1: 0.8550  confusion_matrix/result: 
tensor([[80, 20],
        [ 9, 91]])
  data_time: 0.0047  time: 0.3760
2024/11/21 19:10:04 - mmengine - INFO - Epoch(train)  [5][ 20/338]  lr: 8.4963e-04  eta: 0:38:21  time: 0.5384  data_time: 0.0058  memory: 1978  loss: 0.0096  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0096
2024/11/21 19:10:15 - mmengine - INFO - Epoch(train)  [5][ 40/338]  lr: 8.4545e-04  eta: 0:38:08  time: 0.5486  data_time: 0.0041  memory: 2136  loss: 0.0062  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0062
2024/11/21 19:10:26 - mmengine - INFO - Epoch(train)  [5][ 60/338]  lr: 8.4123e-04  eta: 0:37:55  time: 0.5456  data_time: 0.0048  memory: 1978  loss: 0.0181  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0181
2024/11/21 19:10:37 - mmengine - INFO - Epoch(train)  [5][ 80/338]  lr: 8.3696e-04  eta: 0:37:43  time: 0.5522  data_time: 0.0043  memory: 2136  loss: 0.0086  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0086
2024/11/21 19:10:48 - mmengine - INFO - Epoch(train)  [5][100/338]  lr: 8.3265e-04  eta: 0:37:30  time: 0.5504  data_time: 0.0050  memory: 1850  loss: 0.0107  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0107
2024/11/21 19:10:59 - mmengine - INFO - Epoch(train)  [5][120/338]  lr: 8.2829e-04  eta: 0:37:18  time: 0.5434  data_time: 0.0040  memory: 1932  loss: 0.0067  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0067
2024/11/21 19:11:10 - mmengine - INFO - Epoch(train)  [5][140/338]  lr: 8.2388e-04  eta: 0:37:06  time: 0.5665  data_time: 0.0049  memory: 1932  loss: 0.0204  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0204
2024/11/21 19:11:21 - mmengine - INFO - Epoch(train)  [5][160/338]  lr: 8.1944e-04  eta: 0:36:54  time: 0.5552  data_time: 0.0042  memory: 1904  loss: 0.0526  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0526
2024/11/21 19:11:32 - mmengine - INFO - Epoch(train)  [5][180/338]  lr: 8.1495e-04  eta: 0:36:41  time: 0.5402  data_time: 0.0048  memory: 1788  loss: 0.0453  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0453
2024/11/21 19:11:43 - mmengine - INFO - Epoch(train)  [5][200/338]  lr: 8.1041e-04  eta: 0:36:28  time: 0.5317  data_time: 0.0038  memory: 1643  loss: 0.0403  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0403
2024/11/21 19:11:54 - mmengine - INFO - Epoch(train)  [5][220/338]  lr: 8.0584e-04  eta: 0:36:15  time: 0.5351  data_time: 0.0049  memory: 1753  loss: 0.0490  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.0490
2024/11/21 19:12:04 - mmengine - INFO - Epoch(train)  [5][240/338]  lr: 8.0122e-04  eta: 0:36:02  time: 0.5284  data_time: 0.0041  memory: 1753  loss: 0.0295  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0295
2024/11/21 19:12:15 - mmengine - INFO - Epoch(train)  [5][260/338]  lr: 7.9656e-04  eta: 0:35:49  time: 0.5323  data_time: 0.0048  memory: 1792  loss: 0.0271  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0271
2024/11/21 19:12:25 - mmengine - INFO - Epoch(train)  [5][280/338]  lr: 7.9187e-04  eta: 0:35:36  time: 0.5269  data_time: 0.0040  memory: 1978  loss: 0.0247  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0247
2024/11/21 19:12:36 - mmengine - INFO - Epoch(train)  [5][300/338]  lr: 7.8713e-04  eta: 0:35:24  time: 0.5443  data_time: 0.0052  memory: 2136  loss: 0.0299  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0299
2024/11/21 19:12:47 - mmengine - INFO - Epoch(train)  [5][320/338]  lr: 7.8236e-04  eta: 0:35:12  time: 0.5513  data_time: 0.0044  memory: 1978  loss: 0.0145  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0145
2024/11/21 19:12:56 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:12:56 - mmengine - INFO - Epoch(train)  [5][338/338]  lr: 7.7803e-04  eta: 0:35:00  time: 0.5277  data_time: 0.0054  memory: 1822  loss: 0.0276  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0276
2024/11/21 19:12:57 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/11/21 19:13:02 - mmengine - INFO - Epoch(val) [5][13/13]    acc/top1: 0.8000  acc/top5: 1.0000  acc/mean1: 0.8000  confusion_matrix/result: 
tensor([[68, 32],
        [ 8, 92]])
  data_time: 0.0051  time: 0.3355
2024/11/21 19:13:13 - mmengine - INFO - Epoch(train)  [6][ 20/338]  lr: 7.7318e-04  eta: 0:34:47  time: 0.5351  data_time: 0.0058  memory: 1822  loss: 0.0212  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0212
2024/11/21 19:13:24 - mmengine - INFO - Epoch(train)  [6][ 40/338]  lr: 7.6830e-04  eta: 0:34:35  time: 0.5388  data_time: 0.0042  memory: 2136  loss: 0.0511  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0511
2024/11/21 19:13:35 - mmengine - INFO - Epoch(train)  [6][ 60/338]  lr: 7.6338e-04  eta: 0:34:22  time: 0.5307  data_time: 0.0047  memory: 1644  loss: 0.0119  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0119
2024/11/21 19:13:46 - mmengine - INFO - Epoch(train)  [6][ 80/338]  lr: 7.5842e-04  eta: 0:34:11  time: 0.5705  data_time: 0.0044  memory: 1932  loss: 0.0174  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0174
2024/11/21 19:13:57 - mmengine - INFO - Epoch(train)  [6][100/338]  lr: 7.5343e-04  eta: 0:33:59  time: 0.5378  data_time: 0.0047  memory: 1904  loss: 0.0121  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0121
2024/11/21 19:14:07 - mmengine - INFO - Epoch(train)  [6][120/338]  lr: 7.4841e-04  eta: 0:33:46  time: 0.5239  data_time: 0.0041  memory: 1792  loss: 0.0075  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0075
2024/11/21 19:14:18 - mmengine - INFO - Epoch(train)  [6][140/338]  lr: 7.4335e-04  eta: 0:33:34  time: 0.5487  data_time: 0.0049  memory: 2136  loss: 0.0418  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0418
2024/11/21 19:14:29 - mmengine - INFO - Epoch(train)  [6][160/338]  lr: 7.3826e-04  eta: 0:33:22  time: 0.5508  data_time: 0.0044  memory: 1978  loss: 0.1034  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1034
2024/11/21 19:14:40 - mmengine - INFO - Epoch(train)  [6][180/338]  lr: 7.3313e-04  eta: 0:33:11  time: 0.5655  data_time: 0.0049  memory: 1850  loss: 0.0835  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0835
2024/11/21 19:14:52 - mmengine - INFO - Epoch(train)  [6][200/338]  lr: 7.2798e-04  eta: 0:33:00  time: 0.5612  data_time: 0.0045  memory: 1792  loss: 0.0377  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0377
2024/11/21 19:15:03 - mmengine - INFO - Epoch(train)  [6][220/338]  lr: 7.2279e-04  eta: 0:32:49  time: 0.5663  data_time: 0.0054  memory: 1752  loss: 0.0342  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0342
2024/11/21 19:15:14 - mmengine - INFO - Epoch(train)  [6][240/338]  lr: 7.1758e-04  eta: 0:32:37  time: 0.5419  data_time: 0.0042  memory: 1978  loss: 0.0226  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0226
2024/11/21 19:15:25 - mmengine - INFO - Epoch(train)  [6][260/338]  lr: 7.1233e-04  eta: 0:32:25  time: 0.5602  data_time: 0.0051  memory: 1932  loss: 0.0320  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0320
2024/11/21 19:15:38 - mmengine - INFO - Epoch(train)  [6][280/338]  lr: 7.0706e-04  eta: 0:32:17  time: 0.6603  data_time: 0.0077  memory: 1644  loss: 0.0112  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0112
2024/11/21 19:15:50 - mmengine - INFO - Epoch(train)  [6][300/338]  lr: 7.0176e-04  eta: 0:32:07  time: 0.5840  data_time: 0.0067  memory: 2136  loss: 0.0189  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0189
2024/11/21 19:15:56 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:16:02 - mmengine - INFO - Epoch(train)  [6][320/338]  lr: 6.9643e-04  eta: 0:31:56  time: 0.5777  data_time: 0.0049  memory: 1978  loss: 0.0119  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0119
2024/11/21 19:16:11 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_185406
2024/11/21 19:16:11 - mmengine - INFO - Epoch(train)  [6][338/338]  lr: 6.9161e-04  eta: 0:31:45  time: 0.5410  data_time: 0.0040  memory: 1978  loss: 0.0131  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.0131
2024/11/21 19:16:11 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/11/21 19:16:17 - mmengine - INFO - Epoch(val) [6][13/13]    acc/top1: 0.8400  acc/top5: 1.0000  acc/mean1: 0.8400  confusion_matrix/result: 
tensor([[75, 25],
        [ 7, 93]])
  data_time: 0.0051  time: 0.3195
2024/11/21 19:16:17 - mmengine - INFO - the monitored metric did not improve in the last 5 records. best score: 0.845. 
2024/11/21 19:16:21 - mmengine - INFO - Epoch(val) [6][13/13]    acc/top1: 0.8400  acc/top5: 1.0000  acc/mean1: 0.8400  confusion_matrix/result: 
tensor([[75, 25],
        [ 7, 93]])
  data_time: 0.0040  time: 0.2545
2024/11/21 19:16:21 - mmengine - INFO - the monitored metric did not improve in the last 6 records. best score: 0.845. 
