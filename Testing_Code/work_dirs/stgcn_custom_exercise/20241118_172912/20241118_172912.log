2024/11/18 17:29:15 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 1472152101
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64
    GCC: n/a
    PyTorch: 2.4.1
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=0, USE_CUDNN=OFF, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.20.0
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1472152101
    diff_rank_seed: False
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/11/18 17:29:16 - mmengine - INFO - Config:
ann_file = '../loso_split_s01.pkl'
custom_layout = dict(
    center=0,
    inward=[
        (
            1,
            0,
        ),
        (
            2,
            1,
        ),
        (
            3,
            2,
        ),
        (
            4,
            3,
        ),
        (
            5,
            4,
        ),
        (
            6,
            3,
        ),
        (
            7,
            6,
        ),
        (
            8,
            7,
        ),
        (
            9,
            8,
        ),
        (
            10,
            3,
        ),
        (
            11,
            10,
        ),
        (
            12,
            11,
        ),
        (
            13,
            12,
        ),
        (
            14,
            0,
        ),
        (
            15,
            14,
        ),
        (
            16,
            15,
        ),
        (
            17,
            16,
        ),
        (
            18,
            0,
        ),
        (
            19,
            18,
        ),
        (
            20,
            19,
        ),
        (
            21,
            20,
        ),
    ],
    num_node=22)
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'modified_checkpoint.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
loso_dir = '../loso'
model = dict(
    backbone=dict(
        gcn_adaptive='init',
        graph_cfg=dict(
            layout=dict(
                center=0,
                inward=[
                    (
                        1,
                        0,
                    ),
                    (
                        2,
                        1,
                    ),
                    (
                        3,
                        2,
                    ),
                    (
                        4,
                        3,
                    ),
                    (
                        5,
                        4,
                    ),
                    (
                        6,
                        3,
                    ),
                    (
                        7,
                        6,
                    ),
                    (
                        8,
                        7,
                    ),
                    (
                        9,
                        8,
                    ),
                    (
                        10,
                        3,
                    ),
                    (
                        11,
                        10,
                    ),
                    (
                        12,
                        11,
                    ),
                    (
                        13,
                        12,
                    ),
                    (
                        14,
                        0,
                    ),
                    (
                        15,
                        14,
                    ),
                    (
                        16,
                        15,
                    ),
                    (
                        17,
                        16,
                    ),
                    (
                        18,
                        0,
                    ),
                    (
                        19,
                        18,
                    ),
                    (
                        20,
                        19,
                    ),
                    (
                        21,
                        20,
                    ),
                ],
                num_node=22),
            mode='stgcn_spatial'),
        in_channels=3,
        type='STGCN'),
    cls_head=dict(in_channels=256, num_classes=12, type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.0005,
        momentum=0.9,
        nesterov=True,
        type='SGD',
        weight_decay=0.0005))
param_scheduler = [
    dict(
        T_max=16,
        by_epoch=True,
        convert_to_iter_based=True,
        eta_min=0,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, diff_rank_seed=False, seed=None)
resume = False
test_pipeline = [
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(
    max_epochs=30, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=64,
    dataset=dict(
        dataset=dict(
            ann_file='../loso_split_s01.pkl',
            pipeline=[
                dict(type='PoseDecode'),
                dict(num_person=1, type='FormatGCNInput'),
                dict(type='PackActionInputs'),
            ],
            split='xsub_train',
            type='PoseDataset'),
        times=2,
        type='RepeatDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
train_pipeline = [
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=64,
    dataset=dict(
        ann_file='../loso_split_s01.pkl',
        pipeline=[
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(type='AccMetric'),
]
val_pipeline = [
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs\\stgcn_custom_exercise'

2024/11/18 17:29:19 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/11/18 17:29:19 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/11/18 17:29:20 - mmengine - INFO - 1080 videos remain after valid thresholding
2024/11/18 17:29:21 - mmengine - INFO - 120 videos remain after valid thresholding
Name of parameter - Initialization information

backbone.data_bn.weight - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.data_bn.bias - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.weight - torch.Size([192, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.conv.weight - torch.Size([64, 64, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.conv.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.conv.weight - torch.Size([64, 64, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.conv.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.conv.weight - torch.Size([64, 64, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.conv.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.conv.weight - torch.Size([64, 64, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.conv.bias - torch.Size([64]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.weight - torch.Size([384, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.conv.weight - torch.Size([128, 128, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.conv.weight - torch.Size([128, 128, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.conv.weight - torch.Size([128, 128, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.weight - torch.Size([768, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.conv.weight - torch.Size([256, 256, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.conv.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.conv.weight - torch.Size([256, 256, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.conv.weight - torch.Size([256, 256, 9, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

cls_head.fc.weight - torch.Size([12, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

cls_head.fc.bias - torch.Size([12]): 
NormalInit: mean=0, std=0.01, bias=0 
2024/11/18 17:29:22 - mmengine - INFO - Load checkpoint from modified_checkpoint.pth
2024/11/18 17:29:22 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/11/18 17:29:22 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/11/18 17:29:22 - mmengine - INFO - Checkpoints will be saved to C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\work_dirs\stgcn_custom_exercise.
2024/11/18 17:32:41 - mmengine - INFO - Epoch(train)  [1][20/34]  lr: 4.9850e-04  eta: 2:45:49  time: 9.9493  data_time: 1.8957  loss: 2.4280  top1_acc: 0.0469  top5_acc: 0.5312  loss_cls: 2.4280
2024/11/18 17:34:18 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:34:18 - mmengine - INFO - Epoch(train)  [1][34/34]  lr: 4.9547e-04  eta: 2:23:17  time: 7.1067  data_time: 0.0504  loss: 2.3251  top1_acc: 0.2083  top5_acc: 0.8542  loss_cls: 2.3251
2024/11/18 17:34:18 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/11/18 17:35:01 - mmengine - INFO - Epoch(val) [1][2/2]    acc/top1: 0.1667  acc/top5: 0.5500  acc/mean1: 0.1667  data_time: 18.2540  time: 20.7987
2024/11/18 17:35:02 - mmengine - INFO - The best checkpoint with 0.1667 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
2024/11/18 17:37:33 - mmengine - INFO - Epoch(train)  [2][20/34]  lr: 4.8838e-04  eta: 2:13:10  time: 7.5099  data_time: 0.0181  loss: 2.3190  top1_acc: 0.0312  top5_acc: 0.4375  loss_cls: 2.3190
2024/11/18 17:39:11 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:39:11 - mmengine - INFO - Epoch(train)  [2][34/34]  lr: 4.8152e-04  eta: 2:07:08  time: 7.0302  data_time: 0.0123  loss: 2.2148  top1_acc: 0.6250  top5_acc: 0.9375  loss_cls: 2.2148
2024/11/18 17:39:11 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/11/18 17:39:18 - mmengine - INFO - Epoch(val) [2][2/2]    acc/top1: 0.1500  acc/top5: 0.5000  acc/mean1: 0.1500  data_time: 0.0113  time: 2.5442
2024/11/18 17:41:43 - mmengine - INFO - Epoch(train)  [3][20/34]  lr: 4.6910e-04  eta: 2:01:47  time: 7.2533  data_time: 0.0166  loss: 2.2560  top1_acc: 0.0469  top5_acc: 0.6250  loss_cls: 2.2560
2024/11/18 17:43:18 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:43:18 - mmengine - INFO - Epoch(train)  [3][34/34]  lr: 4.5867e-04  eta: 1:57:41  time: 6.8104  data_time: 0.0110  loss: 2.1647  top1_acc: 0.6875  top5_acc: 1.0000  loss_cls: 2.1647
2024/11/18 17:43:18 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/11/18 17:43:24 - mmengine - INFO - Epoch(val) [3][2/2]    acc/top1: 0.0917  acc/top5: 0.4750  acc/mean1: 0.0917  data_time: 0.0097  time: 2.3600
2024/11/18 17:45:47 - mmengine - INFO - Epoch(train)  [4][20/34]  lr: 4.4141e-04  eta: 1:53:49  time: 7.1609  data_time: 0.0153  loss: 2.2285  top1_acc: 0.0469  top5_acc: 0.7031  loss_cls: 2.2285
2024/11/18 17:47:19 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:47:19 - mmengine - INFO - Epoch(train)  [4][34/34]  lr: 4.2779e-04  eta: 1:50:33  time: 6.6997  data_time: 0.0101  loss: 2.1362  top1_acc: 0.6875  top5_acc: 0.9792  loss_cls: 2.1362
2024/11/18 17:47:19 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/11/18 17:47:26 - mmengine - INFO - Epoch(val) [4][2/2]    acc/top1: 0.0917  acc/top5: 0.5000  acc/mean1: 0.0917  data_time: 0.0100  time: 2.4657
2024/11/18 17:49:51 - mmengine - INFO - Epoch(train)  [5][20/34]  lr: 4.0636e-04  eta: 1:47:38  time: 7.2844  data_time: 0.0163  loss: 2.2067  top1_acc: 0.0312  top5_acc: 0.7188  loss_cls: 2.2067
2024/11/18 17:51:35 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:51:35 - mmengine - INFO - Epoch(train)  [5][34/34]  lr: 3.9009e-04  eta: 1:45:47  time: 7.4137  data_time: 0.0152  loss: 2.1169  top1_acc: 0.7083  top5_acc: 0.9792  loss_cls: 2.1169
2024/11/18 17:51:35 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/11/18 17:51:41 - mmengine - INFO - Epoch(val) [5][2/2]    acc/top1: 0.0917  acc/top5: 0.5083  acc/mean1: 0.0917  data_time: 0.0107  time: 2.3448
2024/11/18 17:54:15 - mmengine - INFO - Epoch(train)  [6][20/34]  lr: 3.6529e-04  eta: 1:43:39  time: 7.7116  data_time: 0.0194  loss: 2.1870  top1_acc: 0.0625  top5_acc: 0.7656  loss_cls: 2.1870
2024/11/18 17:55:52 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 17:55:52 - mmengine - INFO - Epoch(train)  [6][34/34]  lr: 3.4700e-04  eta: 1:41:21  time: 7.0761  data_time: 0.0132  loss: 2.0984  top1_acc: 0.6875  top5_acc: 0.9792  loss_cls: 2.0984
2024/11/18 17:55:52 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/11/18 17:55:58 - mmengine - INFO - Epoch(val) [6][2/2]    acc/top1: 0.1333  acc/top5: 0.5500  acc/mean1: 0.1333  data_time: 0.0119  time: 2.3651
2024/11/18 17:58:48 - mmengine - INFO - Epoch(train)  [7][20/34]  lr: 3.1980e-04  eta: 1:40:05  time: 8.4828  data_time: 0.0194  loss: 2.1650  top1_acc: 0.0312  top5_acc: 0.7812  loss_cls: 2.1650
2024/11/18 18:00:44 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 18:00:44 - mmengine - INFO - Epoch(train)  [7][34/34]  lr: 3.0019e-04  eta: 1:38:52  time: 8.3923  data_time: 0.0175  loss: 2.0772  top1_acc: 0.6875  top5_acc: 0.9792  loss_cls: 2.0772
2024/11/18 18:00:44 - mmengine - INFO - Saving checkpoint at 7 epochs
2024/11/18 18:00:52 - mmengine - INFO - Epoch(val) [7][2/2]    acc/top1: 0.0917  acc/top5: 0.5000  acc/mean1: 0.0917  data_time: 0.0137  time: 3.0284
2024/11/18 18:03:41 - mmengine - INFO - Epoch(train)  [8][20/34]  lr: 2.7163e-04  eta: 1:37:10  time: 8.4258  data_time: 0.0197  loss: 2.1451  top1_acc: 0.0156  top5_acc: 0.7656  loss_cls: 2.1451
2024/11/18 18:05:42 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241118_172912
2024/11/18 18:05:42 - mmengine - INFO - Epoch(train)  [8][34/34]  lr: 2.5144e-04  eta: 1:36:02  time: 8.3175  data_time: 0.0165  loss: 2.0549  top1_acc: 0.7500  top5_acc: 0.9792  loss_cls: 2.0549
2024/11/18 18:05:42 - mmengine - INFO - Saving checkpoint at 8 epochs
2024/11/18 18:05:51 - mmengine - INFO - Epoch(val) [8][2/2]    acc/top1: 0.1083  acc/top5: 0.5250  acc/mean1: 0.1083  data_time: 0.0153  time: 3.2410
