2024/11/21 01:09:23 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 (default, Oct  3 2024, 15:19:54) [MSC v.1929 64 bit (AMD64)]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 1425054588
    GPU 0: NVIDIA GeForce GTX 1650
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
    NVCC: Cuda compilation tools, release 12.1, V12.1.66
    MSVC: Microsoft (R) C/C++ Optimizing Compiler Version 19.35.32215 for x64
    GCC: n/a
    PyTorch: 2.4.1+cu118
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930154
  - Intel(R) oneAPI Math Kernel Library Version 2024.2.1-Product Build 20240722 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.4.2 (Git Hash 1137e04ec0b5251ca2b4400a4fd3c667ce843d67)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - CUDA Runtime 11.8
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90;-gencode;arch=compute_37,code=compute_37
  - CuDNN 90.1
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.8, CUDNN_VERSION=9.1.0, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.4.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.19.1+cu118
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 1425054588
    diff_rank_seed: False
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/11/21 01:09:25 - mmengine - INFO - Config:
ann_file = '../datasets/80-20-split/80_20.pkl'
custom_layout = dict(
    center=0,
    inward=[
        (
            1,
            0,
        ),
        (
            2,
            1,
        ),
        (
            3,
            2,
        ),
        (
            4,
            3,
        ),
        (
            5,
            4,
        ),
        (
            6,
            3,
        ),
        (
            7,
            6,
        ),
        (
            8,
            7,
        ),
        (
            9,
            8,
        ),
        (
            10,
            3,
        ),
        (
            11,
            10,
        ),
        (
            12,
            11,
        ),
        (
            13,
            12,
        ),
        (
            14,
            0,
        ),
        (
            15,
            14,
        ),
        (
            16,
            15,
        ),
        (
            17,
            16,
        ),
        (
            18,
            0,
        ),
        (
            19,
            18,
        ),
        (
            20,
            19,
        ),
        (
            21,
            20,
        ),
    ],
    num_node=22)
dataset_type = 'PoseDataset'
default_hooks = dict(
    checkpoint=dict(interval=1, save_best='auto', type='CheckpointHook'),
    early_stop=dict(
        monitor='acc/top1',
        patience=5,
        rule='greater',
        type='EarlyStoppingHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'modified_checkpoint.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
loso_dir = '../loso'
model = dict(
    backbone=dict(
        gcn_adaptive='init',
        gcn_with_res=True,
        graph_cfg=dict(
            layout=dict(
                center=0,
                inward=[
                    (
                        1,
                        0,
                    ),
                    (
                        2,
                        1,
                    ),
                    (
                        3,
                        2,
                    ),
                    (
                        4,
                        3,
                    ),
                    (
                        5,
                        4,
                    ),
                    (
                        6,
                        3,
                    ),
                    (
                        7,
                        6,
                    ),
                    (
                        8,
                        7,
                    ),
                    (
                        9,
                        8,
                    ),
                    (
                        10,
                        3,
                    ),
                    (
                        11,
                        10,
                    ),
                    (
                        12,
                        11,
                    ),
                    (
                        13,
                        12,
                    ),
                    (
                        14,
                        0,
                    ),
                    (
                        15,
                        14,
                    ),
                    (
                        16,
                        15,
                    ),
                    (
                        17,
                        16,
                    ),
                    (
                        18,
                        0,
                    ),
                    (
                        19,
                        18,
                    ),
                    (
                        20,
                        19,
                    ),
                    (
                        21,
                        20,
                    ),
                ],
                num_node=22),
            mode='stgcn_spatial'),
        in_channels=3,
        tcn_type='mstcn',
        type='STGCN'),
    cls_head=dict(in_channels=256, num_classes=2, type='GCNHead'),
    type='RecognizerGCN')
optim_wrapper = dict(
    optimizer=dict(
        lr=0.01, momentum=0.9, nesterov=True, type='SGD', weight_decay=0.0005))
param_scheduler = [
    dict(
        T_max=16,
        by_epoch=True,
        convert_to_iter_based=True,
        eta_min=0,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, diff_rank_seed=False, seed=None)
resume = False
train_cfg = dict(
    max_epochs=16, type='EpochBasedTrainLoop', val_begin=1, val_interval=1)
train_dataloader = dict(
    batch_size=16,
    dataset=dict(
        dataset=dict(
            ann_file='../datasets/80-20-split/80_20.pkl',
            pipeline=[
                dict(dataset='coco', feats=[
                    'jm',
                ], type='GenSkeFeat'),
                dict(type='PoseDecode'),
                dict(num_person=1, type='FormatGCNInput'),
                dict(type='PackActionInputs'),
            ],
            split='xsub_train',
            type='PoseDataset'),
        times=1,
        type='RepeatDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=16,
    dataset=dict(
        ann_file='../datasets/80-20-split/80_20.pkl',
        pipeline=[
            dict(dataset='coco', feats=[
                'jm',
            ], type='GenSkeFeat'),
            dict(type='PoseDecode'),
            dict(num_person=1, type='FormatGCNInput'),
            dict(type='PackActionInputs'),
        ],
        split='xsub_val',
        test_mode=True,
        type='PoseDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = [
    dict(type='AccMetric'),
]
val_pipeline = [
    dict(dataset='coco', feats=[
        'jm',
    ], type='GenSkeFeat'),
    dict(type='PoseDecode'),
    dict(num_person=1, type='FormatGCNInput'),
    dict(type='PackActionInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './hyperparam_2class_all/lr_0.01_bs_16_repeat_1'

2024/11/21 01:09:27 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/11/21 01:09:27 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
(LOWEST      ) EarlyStoppingHook                  
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/11/21 01:09:30 - mmengine - INFO - 1600 videos remain after valid thresholding
2024/11/21 01:10:51 - mmengine - INFO - 400 videos remain after valid thresholding
Name of parameter - Initialization information

backbone.data_bn.weight - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.data_bn.bias - torch.Size([66]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.weight - torch.Size([192, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.weight - torch.Size([64, 3, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.gcn.down.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.0.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.0.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.1.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.1.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.2.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.2.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.weight - torch.Size([192, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.gcn.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.weight - torch.Size([14, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.0.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.weight - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.1.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.0.3.conv.weight - torch.Size([14, 14, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.0.3.conv.bias - torch.Size([14]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.1.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.1.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.2.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.2.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.3.3.conv.weight - torch.Size([10, 10, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.3.3.conv.bias - torch.Size([10]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.3.tcn.branches.4.0.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.0.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.weight - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.4.1.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.weight - torch.Size([10, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.branches.5.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.weight - torch.Size([64, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.transform.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.3.tcn.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.weight - torch.Size([384, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.weight - torch.Size([128, 64, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.gcn.down.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.conv.weight - torch.Size([128, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.conv.bias - torch.Size([128]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.4.residual.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.4.residual.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.5.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.5.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.weight - torch.Size([384, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.gcn.conv.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.weight - torch.Size([23, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.0.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.weight - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.1.bias - torch.Size([23]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.0.3.conv.weight - torch.Size([23, 23, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.0.3.conv.bias - torch.Size([23]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.1.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.1.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.2.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.2.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.3.3.conv.weight - torch.Size([21, 21, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.3.3.conv.bias - torch.Size([21]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.6.tcn.branches.4.0.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.0.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.weight - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.4.1.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.weight - torch.Size([21, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.branches.5.bias - torch.Size([21]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.transform.2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.6.tcn.bn.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.weight - torch.Size([768, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.weight - torch.Size([256, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.gcn.down.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.conv.weight - torch.Size([256, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.conv.bias - torch.Size([256]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.7.residual.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.7.residual.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.8.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.8.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.A - torch.Size([3, 22, 22]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.weight - torch.Size([768, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.gcn.conv.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.weight - torch.Size([46, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.0.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.weight - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.1.bias - torch.Size([46]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.0.3.conv.weight - torch.Size([46, 46, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.0.3.conv.bias - torch.Size([46]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.1.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.1.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.2.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.2.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.3.3.conv.weight - torch.Size([42, 42, 3, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.3.3.conv.bias - torch.Size([42]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.gcn.9.tcn.branches.4.0.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.0.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.weight - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.4.1.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.weight - torch.Size([42, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.branches.5.bias - torch.Size([42]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.transform.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

backbone.gcn.9.tcn.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of RecognizerGCN  

cls_head.fc.weight - torch.Size([2, 256]): 
NormalInit: mean=0, std=0.01, bias=0 

cls_head.fc.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 
2024/11/21 01:10:52 - mmengine - INFO - Load checkpoint from modified_checkpoint.pth
2024/11/21 01:10:52 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/11/21 01:10:52 - mmengine - INFO - Checkpoints will be saved to C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\hyperparam_2class_all\lr_0.01_bs_16_repeat_1.
2024/11/21 01:11:44 - mmengine - INFO - Epoch(train)  [1][ 20/100]  lr: 9.9965e-03  eta: 1:08:33  time: 2.6037  data_time: 2.1203  memory: 1937  loss: 0.8969  top1_acc: 0.5625  top5_acc: 1.0000  loss_cls: 0.8969
2024/11/21 01:11:55 - mmengine - INFO - Epoch(train)  [1][ 40/100]  lr: 9.9853e-03  eta: 0:40:54  time: 0.5436  data_time: 0.0036  memory: 1702  loss: 0.5511  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.5511
2024/11/21 01:12:06 - mmengine - INFO - Epoch(train)  [1][ 60/100]  lr: 9.9665e-03  eta: 0:31:33  time: 0.5422  data_time: 0.0035  memory: 1799  loss: 0.5449  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.5449
2024/11/21 01:12:16 - mmengine - INFO - Epoch(train)  [1][ 80/100]  lr: 9.9400e-03  eta: 0:26:40  time: 0.5222  data_time: 0.0037  memory: 1773  loss: 0.5362  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.5362
2024/11/21 01:12:27 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:12:27 - mmengine - INFO - Epoch(train)  [1][100/100]  lr: 9.9058e-03  eta: 0:23:45  time: 0.5384  data_time: 0.0030  memory: 1937  loss: 0.5494  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.5494
2024/11/21 01:12:27 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/11/21 01:13:21 - mmengine - INFO - Epoch(val)  [1][20/25]    eta: 0:00:13  time: 2.6525  data_time: 2.4957  memory: 306  
2024/11/21 01:13:22 - mmengine - INFO - Epoch(val) [1][25/25]    acc/top1: 0.7050  acc/top5: 1.0000  acc/mean1: 0.7040  data_time: 1.9971  time: 2.1488
2024/11/21 01:13:23 - mmengine - INFO - The best checkpoint with 0.7050 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
2024/11/21 01:13:37 - mmengine - INFO - Epoch(train)  [2][ 20/100]  lr: 9.8641e-03  eta: 0:21:59  time: 0.5993  data_time: 0.0044  memory: 1888  loss: 0.4296  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.4296
2024/11/21 01:13:47 - mmengine - INFO - Epoch(train)  [2][ 40/100]  lr: 9.8149e-03  eta: 0:20:28  time: 0.5389  data_time: 0.0032  memory: 1746  loss: 0.4636  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.4636
2024/11/21 01:14:00 - mmengine - INFO - Epoch(train)  [2][ 60/100]  lr: 9.7583e-03  eta: 0:19:37  time: 0.6531  data_time: 0.0044  memory: 1937  loss: 0.4102  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.4102
2024/11/21 01:14:12 - mmengine - INFO - Epoch(train)  [2][ 80/100]  lr: 9.6943e-03  eta: 0:18:46  time: 0.5979  data_time: 0.0031  memory: 1937  loss: 0.4085  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.4085
2024/11/21 01:14:24 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:14:24 - mmengine - INFO - Epoch(train)  [2][100/100]  lr: 9.6231e-03  eta: 0:17:57  time: 0.5569  data_time: 0.0033  memory: 1563  loss: 0.4328  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.4328
2024/11/21 01:14:24 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/11/21 01:14:28 - mmengine - INFO - Epoch(val)  [2][20/25]    eta: 0:00:00  time: 0.1844  data_time: 0.0212  memory: 306  
2024/11/21 01:14:29 - mmengine - INFO - Epoch(val) [2][25/25]    acc/top1: 0.8250  acc/top5: 1.0000  acc/mean1: 0.8242  data_time: 0.0167  time: 0.1729
2024/11/21 01:14:29 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\hyperparam_2class_all\lr_0.01_bs_16_repeat_1\best_acc_top1_epoch_1.pth is removed
2024/11/21 01:14:30 - mmengine - INFO - The best checkpoint with 0.8250 acc/top1 at 2 epoch is saved to best_acc_top1_epoch_2.pth.
2024/11/21 01:14:42 - mmengine - INFO - Epoch(train)  [3][ 20/100]  lr: 9.5448e-03  eta: 0:17:16  time: 0.5643  data_time: 0.0059  memory: 1773  loss: 0.3397  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.3397
2024/11/21 01:14:54 - mmengine - INFO - Epoch(train)  [3][ 40/100]  lr: 9.4595e-03  eta: 0:16:42  time: 0.5807  data_time: 0.0042  memory: 1888  loss: 0.4050  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.4050
2024/11/21 01:15:06 - mmengine - INFO - Epoch(train)  [3][ 60/100]  lr: 9.3673e-03  eta: 0:16:13  time: 0.6045  data_time: 0.0045  memory: 1937  loss: 0.3381  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3381
2024/11/21 01:15:18 - mmengine - INFO - Epoch(train)  [3][ 80/100]  lr: 9.2683e-03  eta: 0:15:47  time: 0.6086  data_time: 0.0034  memory: 1937  loss: 0.3933  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.3933
2024/11/21 01:15:29 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:15:29 - mmengine - INFO - Epoch(train)  [3][100/100]  lr: 9.1628e-03  eta: 0:15:17  time: 0.5370  data_time: 0.0036  memory: 1702  loss: 0.2963  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2963
2024/11/21 01:15:29 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/11/21 01:15:33 - mmengine - INFO - Epoch(val)  [3][20/25]    eta: 0:00:00  time: 0.1643  data_time: 0.0073  memory: 306  
2024/11/21 01:15:34 - mmengine - INFO - Epoch(val) [3][25/25]    acc/top1: 0.7400  acc/top5: 1.0000  acc/mean1: 0.7438  data_time: 0.0062  time: 0.1576
2024/11/21 01:15:45 - mmengine - INFO - Epoch(train)  [4][ 20/100]  lr: 9.0508e-03  eta: 0:14:52  time: 0.5639  data_time: 0.0059  memory: 1937  loss: 0.2612  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.2612
2024/11/21 01:15:57 - mmengine - INFO - Epoch(train)  [4][ 40/100]  lr: 8.9327e-03  eta: 0:14:30  time: 0.5887  data_time: 0.0036  memory: 1937  loss: 0.3762  top1_acc: 0.6250  top5_acc: 1.0000  loss_cls: 0.3762
2024/11/21 01:16:08 - mmengine - INFO - Epoch(train)  [4][ 60/100]  lr: 8.8084e-03  eta: 0:14:07  time: 0.5584  data_time: 0.0036  memory: 1799  loss: 0.3092  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.3092
2024/11/21 01:16:18 - mmengine - INFO - Epoch(train)  [4][ 80/100]  lr: 8.6783e-03  eta: 0:13:40  time: 0.4831  data_time: 0.0042  memory: 1603  loss: 0.3140  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.3140
2024/11/21 01:16:28 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:16:28 - mmengine - INFO - Epoch(train)  [4][100/100]  lr: 8.5425e-03  eta: 0:13:16  time: 0.4949  data_time: 0.0043  memory: 1888  loss: 0.3467  top1_acc: 0.8125  top5_acc: 1.0000  loss_cls: 0.3467
2024/11/21 01:16:28 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/11/21 01:16:32 - mmengine - INFO - Epoch(val)  [4][20/25]    eta: 0:00:00  time: 0.1568  data_time: 0.0085  memory: 306  
2024/11/21 01:16:33 - mmengine - INFO - Epoch(val) [4][25/25]    acc/top1: 0.8125  acc/top5: 1.0000  acc/mean1: 0.8140  data_time: 0.0073  time: 0.1494
2024/11/21 01:16:44 - mmengine - INFO - Epoch(train)  [5][ 20/100]  lr: 8.4012e-03  eta: 0:12:56  time: 0.5306  data_time: 0.0079  memory: 1937  loss: 0.2571  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2571
2024/11/21 01:16:53 - mmengine - INFO - Epoch(train)  [5][ 40/100]  lr: 8.2547e-03  eta: 0:12:31  time: 0.4496  data_time: 0.0041  memory: 1773  loss: 0.2300  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2300
2024/11/21 01:17:04 - mmengine - INFO - Epoch(train)  [5][ 60/100]  lr: 8.1032e-03  eta: 0:12:15  time: 0.5789  data_time: 0.0051  memory: 1857  loss: 0.2535  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2535
2024/11/21 01:17:15 - mmengine - INFO - Epoch(train)  [5][ 80/100]  lr: 7.9469e-03  eta: 0:11:58  time: 0.5561  data_time: 0.0039  memory: 1937  loss: 0.3084  top1_acc: 0.7500  top5_acc: 1.0000  loss_cls: 0.3084
2024/11/21 01:17:26 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:17:26 - mmengine - INFO - Epoch(train)  [5][100/100]  lr: 7.7860e-03  eta: 0:11:41  time: 0.5416  data_time: 0.0041  memory: 1603  loss: 0.2710  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.2710
2024/11/21 01:17:26 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/11/21 01:17:30 - mmengine - INFO - Epoch(val)  [5][20/25]    eta: 0:00:00  time: 0.1541  data_time: 0.0082  memory: 306  
2024/11/21 01:17:31 - mmengine - INFO - Epoch(val) [5][25/25]    acc/top1: 0.8675  acc/top5: 1.0000  acc/mean1: 0.8690  data_time: 0.0076  time: 0.1478
2024/11/21 01:17:31 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\hyperparam_2class_all\lr_0.01_bs_16_repeat_1\best_acc_top1_epoch_2.pth is removed
2024/11/21 01:17:32 - mmengine - INFO - The best checkpoint with 0.8675 acc/top1 at 5 epoch is saved to best_acc_top1_epoch_5.pth.
2024/11/21 01:17:45 - mmengine - INFO - Epoch(train)  [6][ 20/100]  lr: 7.6209e-03  eta: 0:11:26  time: 0.5790  data_time: 0.0075  memory: 1857  loss: 0.2397  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2397
2024/11/21 01:17:55 - mmengine - INFO - Epoch(train)  [6][ 40/100]  lr: 7.4517e-03  eta: 0:11:08  time: 0.5028  data_time: 0.0046  memory: 1746  loss: 0.1919  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1919
2024/11/21 01:18:07 - mmengine - INFO - Epoch(train)  [6][ 60/100]  lr: 7.2787e-03  eta: 0:10:53  time: 0.5738  data_time: 0.0047  memory: 1937  loss: 0.2085  top1_acc: 0.9375  top5_acc: 1.0000  loss_cls: 0.2085
2024/11/21 01:18:18 - mmengine - INFO - Epoch(train)  [6][ 80/100]  lr: 7.1022e-03  eta: 0:10:37  time: 0.5436  data_time: 0.0038  memory: 1741  loss: 0.2449  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2449
2024/11/21 01:18:27 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:18:27 - mmengine - INFO - Epoch(train)  [6][100/100]  lr: 6.9225e-03  eta: 0:10:21  time: 0.4945  data_time: 0.0047  memory: 1937  loss: 0.1905  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1905
2024/11/21 01:18:27 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/11/21 01:18:32 - mmengine - INFO - Epoch(val)  [6][20/25]    eta: 0:00:00  time: 0.1557  data_time: 0.0089  memory: 306  
2024/11/21 01:18:32 - mmengine - INFO - Epoch(val) [6][25/25]    acc/top1: 0.8975  acc/top5: 1.0000  acc/mean1: 0.8965  data_time: 0.0077  time: 0.1486
2024/11/21 01:18:32 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\hyperparam_2class_all\lr_0.01_bs_16_repeat_1\best_acc_top1_epoch_5.pth is removed
2024/11/21 01:18:34 - mmengine - INFO - The best checkpoint with 0.8975 acc/top1 at 6 epoch is saved to best_acc_top1_epoch_6.pth.
2024/11/21 01:18:46 - mmengine - INFO - Epoch(train)  [7][ 20/100]  lr: 6.7398e-03  eta: 0:10:06  time: 0.5645  data_time: 0.0107  memory: 1937  loss: 0.1487  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1487
2024/11/21 01:18:57 - mmengine - INFO - Epoch(train)  [7][ 40/100]  lr: 6.5544e-03  eta: 0:09:52  time: 0.5495  data_time: 0.0040  memory: 1857  loss: 0.1582  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.1582
2024/11/21 01:19:08 - mmengine - INFO - Epoch(train)  [7][ 60/100]  lr: 6.3666e-03  eta: 0:09:37  time: 0.5370  data_time: 0.0052  memory: 1799  loss: 0.1755  top1_acc: 0.8750  top5_acc: 1.0000  loss_cls: 0.1755
2024/11/21 01:19:18 - mmengine - INFO - Epoch(train)  [7][ 80/100]  lr: 6.1768e-03  eta: 0:09:22  time: 0.4893  data_time: 0.0045  memory: 1603  loss: 0.2796  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2796
2024/11/21 01:19:29 - mmengine - INFO - Exp name: stgcn_custom_exercise_20241121_010918
2024/11/21 01:19:29 - mmengine - INFO - Epoch(train)  [7][100/100]  lr: 5.9851e-03  eta: 0:09:08  time: 0.5443  data_time: 0.0044  memory: 1888  loss: 0.2290  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2290
2024/11/21 01:19:29 - mmengine - INFO - Saving checkpoint at 7 epochs
2024/11/21 01:19:33 - mmengine - INFO - Epoch(val)  [7][20/25]    eta: 0:00:00  time: 0.1577  data_time: 0.0090  memory: 306  
2024/11/21 01:19:34 - mmengine - INFO - Epoch(val) [7][25/25]    acc/top1: 0.9200  acc/top5: 1.0000  acc/mean1: 0.9201  data_time: 0.0077  time: 0.1499
2024/11/21 01:19:34 - mmengine - INFO - The previous best checkpoint C:\Users\Jathu\OneDrive\Desktop\Masters of Biomedical Engineering - UofT\Fall 2024\BME 1570 - Intro to Digital Health\codebase\Testing_Code\hyperparam_2class_all\lr_0.01_bs_16_repeat_1\best_acc_top1_epoch_6.pth is removed
2024/11/21 01:19:35 - mmengine - INFO - The best checkpoint with 0.9200 acc/top1 at 7 epoch is saved to best_acc_top1_epoch_7.pth.
2024/11/21 01:19:37 - mmengine - INFO - the monitored metric did not improve in the last 5 records. best score: 0.825. 
2024/11/21 01:19:41 - mmengine - INFO - Epoch(val)  [7][20/25]    eta: 0:00:00  time: 0.1524  data_time: 0.0066  memory: 306  
2024/11/21 01:19:42 - mmengine - INFO - Epoch(val) [7][25/25]    acc/top1: 0.9200  acc/top5: 1.0000  acc/mean1: 0.9201  data_time: 0.0059  time: 0.1450
2024/11/21 01:19:42 - mmengine - INFO - the monitored metric did not improve in the last 6 records. best score: 0.825. 
